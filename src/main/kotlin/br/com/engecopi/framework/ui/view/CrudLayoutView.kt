package br.com.engecopi.framework.ui.view

import br.com.engecopi.framework.viewmodel.ViewModel
import com.github.vok.karibudsl.expandRatio
import com.github.vok.karibudsl.init
import com.vaadin.ui.Alignment
import com.vaadin.ui.Button.ClickListener
import com.vaadin.ui.Component
import com.vaadin.ui.HasComponents
import com.vaadin.ui.VerticalLayout
import org.vaadin.crudui.crud.CrudOperation
import org.vaadin.crudui.crud.CrudOperation.ADD
import org.vaadin.crudui.crud.CrudOperation.DELETE
import org.vaadin.crudui.crud.CrudOperation.READ
import org.vaadin.crudui.crud.CrudOperation.UPDATE
import org.vaadin.crudui.crud.impl.GridCrud
import org.vaadin.crudui.form.AbstractAutoGeneratedCrudFormFactory
import org.vaadin.crudui.form.impl.form.factory.VerticalCrudFormFactory
import org.vaadin.crudui.layout.impl.WindowBasedCrudLayout
import kotlin.reflect.KProperty

abstract class CrudLayoutView<V : ViewModel> : LayoutView<V>() {
  abstract fun fieldsRead(): List<KProperty<*>>
  fun fieldsAdd(): List<KProperty<*>> = fieldsRead()
  fun fieldsUpdate(): List<KProperty<*>> = fieldsRead()
  fun fieldsDelete(): List<KProperty<*>> = fieldsRead()
  fun fieldsColumn(): List<KProperty<*>> = fieldsRead()
  
  override fun updateView(viewModel: ViewModel) {}
  
  override fun updateModel() {}
  fun <T> HasComponents.gridCrud(
          domainType: Class<T>,
          block: GridCrud<T>.() -> Unit = {}
                                ): GridCrud<T> {
    setSizeFull()
    
    val crudLayout = WindowBasedCrudLayout()
    crudLayout.defaults()
    val crudFormFactory = VerticalCrudFormFactory<T>(domainType)
    crudFormFactory.defaults()
    val gridCrud = GridCrud<T>(domainType, crudLayout, crudFormFactory/*, crudListener*/)
    gridCrud.defaults()
    return init(gridCrud) {
      expandRatio = 1f
      block()
    }
  }
  
  private fun WindowBasedCrudLayout.defaults() {
    setWindowCaption(READ, "Consulta")
    setWindowCaption(ADD, "Adiciona")
    setWindowCaption(UPDATE, "Modifica")
    setWindowCaption(DELETE, "Apaga")
  }
  
  private fun <T> VerticalCrudFormFactory<T>.defaults() {
    setVisibleProperties(READ, *fieldsRead().map { it.name }.toTypedArray())
    setVisibleProperties(ADD, *fieldsAdd().map { it.name }.toTypedArray())
    setVisibleProperties(UPDATE, *fieldsUpdate().map { it.name }.toTypedArray())
    setVisibleProperties(DELETE, *fieldsDelete().map { it.name }.toTypedArray())
    
    setButtonCaption(READ, "Consulta")
    setButtonCaption(ADD, "Adiciona")
    setButtonCaption(UPDATE, "Modifica")
    setButtonCaption(DELETE, "Apaga")
    
    setCancelButtonCaption("Cancela")
  }
  
  private fun <T> GridCrud<T>.defaults() {
    grid.setColumns(*fieldsColumn().map { it.name }.toTypedArray())
    setRowCountCaption("%d registro(s) encontrados")
    addButton.description = "Adiciona"
    findAllButton.description = "Atualiza"
    updateButton.description = "Modifica"
    deleteButton.description = "Apaga"
  }
}

class CustomCrudFormFactory<T>(domainType: Class<T>) : AbstractAutoGeneratedCrudFormFactory<T>(domainType) {
  override fun buildNewForm(
          operation: CrudOperation?, domainObject: T, readOnly: Boolean, cancelButtonClickListener: ClickListener?,
          operationButtonClickListener: ClickListener?
                           ): Component {
    binder = buildBinder(operation, domainObject)
    val layout = VerticalLayout()
    
    
    
    binder.readBean(domainObject)
    
    val footerLayout = buildFooter(operation, domainObject, cancelButtonClickListener, operationButtonClickListener)
    
    val mainLayout = VerticalLayout(layout, footerLayout)
    mainLayout.setComponentAlignment(footerLayout, Alignment.BOTTOM_RIGHT)
    mainLayout.setMargin(true)
    
    return mainLayout
  }
}


